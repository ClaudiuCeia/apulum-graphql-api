# import Error, Node from "../shared/schema.graphql"
# import Task from "../task/schema.graphql"
# import User from "../user/schema.graphql"

interface ITaskResolution {
  id: ID!
  description: String!
  achieved: Boolean!
  task: Task!

  creator: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OnDemandTaskResolution implements ITaskResolution & Node {
  id: ID!
  creator: User!
  createdAt: DateTime!
  updatedAt: DateTime!

  description: String!
  achieved: Boolean!
  task: Task!
}

type UserApprovalTaskResolution implements ITaskResolution & Node {
  id: ID!
  creator: User!
  createdAt: DateTime!
  updatedAt: DateTime!

  description: String!
  achieved: Boolean!
  task: Task!
  approver: User
}

type DueDateTaskResolution implements ITaskResolution & Node {
  id: ID!
  creator: User!
  createdAt: DateTime!
  updatedAt: DateTime!

  description: String!
  achieved: Boolean!
  task: Task!
  dueDate: Float
}

type Query {
  taskResolution(id: ID!): ITaskResolution
  taskResolutionForTask(id: ID!): ITaskResolution!
  onDemandTaskResolutions: [ITaskResolution!]
  userApprovalTaskResolutions: [ITaskResolution!]
  dueDateTaskResolutions: [ITaskResolution!]
}

type Mutation {
  createOnDemandTaskResolution(taskId: ID!, description: String!): [Error!]
  createUserApprovalTaskResolution(taskId: ID!, description: String!): [Error!]
  createDueDateTaskResolution(taskId: ID!, description: String!): [Error!]
}
